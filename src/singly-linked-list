#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STUDENTS 100

// ----------- STRUCTURES -----------
typedef struct {
    int studentID;
    char name[50];
} Student;

typedef struct Attendance {
    int studentID;
    char date[20];
    char status[10]; // Present or Absent
    struct Attendance *next;
} Attendance;

// ----------- GLOBAL VARIABLES -----------
Student students[MAX_STUDENTS];
int totalStudents = 0;

// ----------- FUNCTION DECLARATIONS -----------
void addStudent();
void displayStudents();
void addAttendance(Attendance **head);
void deleteAttendance(Attendance **head);
void searchAttendance(Attendance *head);
void displayAttendance(Attendance *head);
void displayAttendanceByDate(Attendance *head);
void reverseDisplay(Attendance *head);
Attendance* cloneAttendanceList(Attendance *head);
void menu();

// ----------- STUDENT FUNCTIONS -----------
void addStudent() {
    if (totalStudents >= MAX_STUDENTS) {
        printf("Max students reached!\n");
        return;
    }
    printf("Enter Student ID: ");
    scanf("%d", &students[totalStudents].studentID);
    printf("Enter Student Name: ");
    scanf("%s", students[totalStudents].name);
    totalStudents++;
    printf("Student added successfully!\n");
}

void displayStudents() {
    printf("\n--- Student List ---\n");
    for (int i = 0; i < totalStudents; i++) {
        printf("ID: %d, Name: %s\n", students[i].studentID, students[i].name);
    }
}

// ----------- ATTENDANCE FUNCTIONS -----------
void addAttendance(Attendance **head) {
    Attendance *newNode = (Attendance*)malloc(sizeof(Attendance));
    printf("Enter Student ID: ");
    scanf("%d", &newNode->studentID);
    printf("Enter Date (DD/MM/YYYY): ");
    scanf("%s", newNode->date);
    printf("Enter Status (Present/Absent): ");
    scanf("%s", newNode->status);

    newNode->next = *head;
    *head = newNode;
    printf("Attendance record added!\n");
}

void deleteAttendance(Attendance **head) {
    int id;
    char date[20];
    printf("Enter Student ID to delete: ");
    scanf("%d", &id);
    printf("Enter Date: ");
    scanf("%s", date);

    Attendance *temp = *head, *prev = NULL;
    while (temp != NULL) {
        if (temp->studentID == id && strcmp(temp->date, date) == 0) {
            if (prev == NULL) *head = temp->next;
            else prev->next = temp->next;
            free(temp);
            printf("Attendance deleted!\n");
            return;
        }
        prev = temp;
        temp = temp->next;
    }
    printf("Record not found!\n");
}

void searchAttendance(Attendance *head) {
    int id;
    char date[20];
    printf("Enter Student ID: ");
    scanf("%d", &id);
    printf("Enter Date: ");
    scanf("%s", date);

    while (head != NULL) {
        if (head->studentID == id && strcmp(head->date, date) == 0) {
            printf("Record Found -> ID: %d, Date: %s, Status: %s\n", head->studentID, head->date, head->status);
            return;
        }
        head = head->next;
    }
    printf("Record not found!\n");
}

void displayAttendance(Attendance *head) {
    printf("\n--- Attendance List ---\n");
    while (head != NULL) {
        printf("ID: %d, Date: %s, Status: %s\n", head->studentID, head->date, head->status);
        head = head->next;
    }
}

void displayAttendanceByDate(Attendance *head) {
    char date[20];
    printf("Enter Date to view attendance: ");
    scanf("%s", date);
    printf("\n--- Attendance on %s ---\n", date);
    while (head != NULL) {
        if (strcmp(head->date, date) == 0) {
            printf("ID: %d, Status: %s\n", head->studentID, head->status);
        }
        head = head->next;
    }
}

void reverseDisplay(Attendance *head) {
    if (head == NULL) return;
    reverseDisplay(head->next);
    printf("ID: %d, Date: %s, Status: %s\n", head->studentID, head->date, head->status);
}

Attendance* cloneAttendanceList(Attendance *head) {
    if (!head) return NULL;
    Attendance *newNode = (Attendance*)malloc(sizeof(Attendance));
    newNode->studentID = head->studentID;
    strcpy(newNode->date, head->date);
    strcpy(newNode->status, head->status);
    newNode->next = cloneAttendanceList(head->next);
    return newNode;
}

// ----------- MAIN MENU -----------
void menu() {
    Attendance *attendanceList = NULL;
    Attendance *clonedList = NULL;
    int choice;
    do {
        printf("\n--- Student Attendance System ---\n");
        printf("1. Add Student\n2. View Students\n3. Add Attendance\n4. Delete Attendance\n");
        printf("5. Search Attendance\n6. Display All Attendance\n7. Display Attendance by Date\n");
        printf("8. Reverse Attendance Display\n9. Clone Attendance List\n10. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: addStudent(); break;
            case 2: displayStudents(); break;
            case 3: addAttendance(&attendanceList); break;
            case 4: deleteAttendance(&attendanceList); break;
            case 5: searchAttendance(attendanceList); break;
            case 6: displayAttendance(attendanceList); break;
            case 7: displayAttendanceByDate(attendanceList); break;
            case 8: reverseDisplay(attendanceList); break;
            case 9:
                clonedList = cloneAttendanceList(attendanceList);
                printf("Attendance list cloned!\n");
                break;
            case 10: printf("Exiting...\n"); break;
            default: printf("Invalid choice!\n");
        }
    } while (choice != 10);
}

int main() {
    menu();
    return 0;
}
